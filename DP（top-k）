
#include <stdio.h>
#include <string.h>

int m=0;
int A[100][100];
int B[100][100][100];

int Merge(int *L,int *R,int * N,int k,int weight){

    int i=0,j=0,u=0;
    while(u<k){
        if(L[i]>=R[j]){
            if(L[i]==0&&R[j]==0){
                break;
            } 
            N[u++]=L[i++];

         } else{
            N[u++]=R[j++];
        }
        N[u-1]+=weight;                                      //不要忘记回去加，所以是减一
    }
    return 0;
}
int robot(int m,int n,int k){
    B[0][0][0]=A[0][0];                                     //这样存到的是第一维的，其余的还是初始化的状态
    for(int i=1;i<n;i++){
        B[0][i][0]=A[0][i]+B[0][i-1][0];
    }
    for(int j=1;j<m;j++){
        B[j][0][0]=A[j][0]+B[j-1][0][0];
    }

    for(int i=1;i<m;i++){
        for(int j=1;j<n;j++){
            Merge(B[i][j-1],B[i-1][j],B[i][j],k,A[i][j]);
        }
    }
    return 0;
}

int main() {
    memset(A,0, sizeof(int )*10000);                            //初始化开辟的数组空间为0
    memset(B,0, sizeof(int )*1000000);
    int n,i,j,k;
    scanf("%d %d",&m,&n);
    scanf("%d",&k);
    for(i=0;i<m;i++ ){
        for(j=0;j<n;j++){
            scanf("%d",&A[i][j]);
        }
    }
    robot(m,n,k);
    for(i=0;i<k-1;i++){
        printf("%d ",B[m-1][n-1][i]);
    }
    printf("%d",B[m-1][n-1][k-1]);
    return 0;
}
